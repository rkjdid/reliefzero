# -*- coding: utf-8 -*-
import os.path

PROJECT_NAME = '___PROJECT_NAME___'
HOME_URL = '___HOME_URL___'
DB_NAME = '___DB_NAME___'
DB_USER = '___DB_USER___'
DB_PASS = '___DB_PASS___'
MEDIA_ROOT = '___MEDIA_ROOT___'
SECRET_KEY = '___SECRET_KEY___'
PAGE_TITLE = '___PAGE_TITLE___'

ALLOWED_HOSTS = [
  '.___HOST_NAME___',
]

APP_NAME = 'relief'

MEDIA_URL = '/%s.media/' % PROJECT_NAME

BASE_PATH = os.path.dirname(__file__)
PROJECT_PATH = os.path.dirname(BASE_PATH)
APP_PATH = os.path.join(PROJECT_PATH, APP_NAME)

DEBUG = True
TEMPLATE_DEBUG = DEBUG

SERVER_EMAIL = 'django.' + PROJECT_NAME + '@wservices.ch'

ADMINS = (
  ('RK', 'romainknezevic@gmail.com'),
)

MANAGERS = ADMINS

DATABASES = {
  'default': {
    'ENGINE': 'django.db.backends.postgresql_psycopg2', # Add 'postgresql_psycopg2', 'mysql', 'sqlite3' or 'oracle'.
    'NAME': DB_NAME, # Or path to database file if using sqlite3.
    'USER': DB_USER, # Not used with sqlite3.
    'PASSWORD': DB_PASS, # Not used with sqlite3.
    'HOST': 'localhost', # Set to empty string for localhost. Not used with sqlite3.
    'PORT': '5432', # Set to empty string for default. Not used with sqlite3.
  }
}

# Local time zone for this installation. Choices can be found here:
# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name
# although not all choices may be available on all operating systems.
# On Unix systems, a value of None will cause Django to use the same
# timezone as the operating system.
# If running in a Windows environment this must be set to the same as your
# system time zone.
TIME_ZONE = 'Europe/Paris'

# Language code for this installation. All choices can be found here:
# http://www.i18nguy.com/unicode/language-identifiers.html
LANGUAGE_CODE = 'fr-FR'

SITE_ID = 1

# If you set this to False, Django will make some optimizations so as not
# to load the internationalization machinery.
USE_I18N = True

# If you set this to False, Django will not format dates, numbers and
# calendars according to the current locale
USE_L10N = True

ROOT_URL = BASE_PATH

STATIC_ROOT = os.path.join(APP_PATH, 'static')
STATIC_URL = '/static/'

MEDIA_ROOT = os.path.join(MEDIA_ROOT, PROJECT_NAME)
ADMIN_MEDIA_ROOT = os.path.join(STATIC_URL, '/admin/')

# Additional locations of static files
STATICFILES_DIRS = (
)

# List of finder classes that know how to find static files in
# various locations.
STATICFILES_FINDERS = (
  'django.contrib.staticfiles.finders.FileSystemFinder',
  'django.contrib.staticfiles.finders.AppDirectoriesFinder',
)

# List of callables that know how to import templates from various sources.
TEMPLATE_LOADERS = (
  'django.template.loaders.filesystem.Loader',
  'django.template.loaders.app_directories.Loader',
  'django.template.loaders.eggs.Loader',
  'apptemplates.Loader',
)

MIDDLEWARE_CLASSES = (
  'django.middleware.gzip.GZipMiddleware',
  'django.middleware.common.CommonMiddleware',
  'django.contrib.sessions.middleware.SessionMiddleware',
  'django.middleware.csrf.CsrfViewMiddleware',
  'django.contrib.auth.middleware.AuthenticationMiddleware',
  'django.contrib.messages.middleware.MessageMiddleware',
)

ROOT_URLCONF = 'relief.urls'

TEMPLATE_DIRS = (
  os.path.join(APP_PATH, 'templates'),
)

TEMPLATE_CONTEXT_PROCESSORS = (
  'django.contrib.auth.context_processors.auth',
  'django.core.context_processors.debug',
  'django.core.context_processors.i18n',
  'django.core.context_processors.media',
  'django.core.context_processors.static',
  'django.core.context_processors.request',
  'django.contrib.messages.context_processors.messages'
)

INSTALLED_APPS = (
  'django.contrib.auth',
  'django.contrib.contenttypes',
  'django.contrib.sessions',
  'django.contrib.messages',
  'django.contrib.staticfiles',

  'django.contrib.admin',

  'south',

  APP_NAME,
)

# A sample logging configuration. The only tangible logging
# performed by this configuration is to send an emai
# the site admins on every HTTP 500 error.
# See http://docs.djangoproject.com/en/dev/topics/logging forl to
# more details on how to customize your logging configuration.
LOGGING = {
  'version': 1,
  'disable_existing_loggers': False,
  'handlers': {
    'mail_admins': {
      'level': 'ERROR',
      'filters': [],
      'class': 'django.utils.log.AdminEmailHandler'
    }
  },
  'loggers': {
    'django.request': {
      'handlers': ['mail_admins'],
      'level': 'ERROR',
      'propagate': True,
    },
  }
}
